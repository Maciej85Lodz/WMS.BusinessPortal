// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Data;

namespace WMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WMS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ApplicationUserRole")
                        .HasColumnType("bit");

                    b.Property<bool>("BranchRole")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomerLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerRole")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("ItemTypeRole")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchaseOrderLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("PurchaseOrderRole")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceivingLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceivingRole")
                        .HasColumnType("bit");

                    b.Property<bool>("SalesOrderLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("SalesOrderRole")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipmentLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("ShipmentRole")
                        .HasColumnType("bit");

                    b.Property<bool>("StockRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferInLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferInRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferOrderLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferOrderRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferOutLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferOutRole")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("VendorLineRole")
                        .HasColumnType("bit");

                    b.Property<bool>("VendorRole")
                        .HasColumnType("bit");

                    b.Property<bool>("WarehouseRole")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WMS.Models.Invent.Branch", b =>
                {
                    b.Property<string>("BranchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDefaultBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BranchId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("WMS.Models.Invent.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WMS.Models.Invent.CustomerLine", b =>
                {
                    b.Property<string>("CustomerLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NickName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salutation")
                        .HasColumnType("int");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerLineId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.ItemType", b =>
                {
                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemTypeType")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturersNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UOM")
                        .HasColumnType("int");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("WMS.Models.Invent.PurchaseOrder", b =>
                {
                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicInternal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PicVendor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("PurchaseOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PurchaseOrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseReceiveNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumberExternal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ReferenceNumberInternal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<int>("top")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("BranchId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.PurchaseOrderLine", b =>
                {
                    b.Property<string>("purchaseOrderLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("purchaseOrderLineId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Receiving", b =>
                {
                    b.Property<string>("ReceivingId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VendorDONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("VendorInvoice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("ReceivingId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Receiving");
                });

            modelBuilder.Entity("WMS.Models.Invent.ReceivingLine", b =>
                {
                    b.Property<string>("ReceivingLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("QtyInventory")
                        .HasColumnType("real");

                    b.Property<float>("QtyOrder")
                        .HasColumnType("real");

                    b.Property<float>("QtyReceive")
                        .HasColumnType("real");

                    b.Property<string>("ReceivingId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("ReceivingLineId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ReceivingId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReceivingLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.SalesOrder", b =>
                {
                    b.Property<string>("SalesOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicCustomer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PicInternal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ReferenceNumberExternal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ReferenceNumberInternal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("SalesOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SalesOrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("SalesShipmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.SalesOrderLine", b =>
                {
                    b.Property<string>("SalesOrderLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Qty")
                        .HasColumnType("real");

                    b.Property<string>("SalesOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesOrderLineId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Shipment", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("CustomerPurchaseOrder")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ExpeditionMode")
                        .HasColumnType("int");

                    b.Property<int>("ExpeditionType")
                        .HasColumnType("int");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SalesOrderId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("ShipmentId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("WMS.Models.Invent.ShipmentLine", b =>
                {
                    b.Property<string>("ShipmentLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("Qty")
                        .HasColumnType("real");

                    b.Property<float>("QtyInventory")
                        .HasColumnType("real");

                    b.Property<float>("QtyShipment")
                        .HasColumnType("real");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("ShipmentLineId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ShipmentLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferIn", b =>
                {
                    b.Property<string>("TansferInId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchFromBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchToBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferInNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransferOrderId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseFromwarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseTowarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TansferInId");

                    b.HasIndex("BranchFromBranchId");

                    b.HasIndex("BranchToBranchId");

                    b.HasIndex("TransferOrderId");

                    b.HasIndex("WarehouseFromwarehouseId");

                    b.HasIndex("WarehouseTowarehouseId");

                    b.ToTable("TransferIn");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferInLine", b =>
                {
                    b.Property<string>("TransferInLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("Qty")
                        .HasColumnType("real");

                    b.Property<float>("QtyInventory")
                        .HasColumnType("real");

                    b.Property<string>("TransferInId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TransferInLineId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("TransferInId");

                    b.ToTable("TransferInLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOrder", b =>
                {
                    b.Property<string>("TransferOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchFromBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchToBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIssued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("PicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransferOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TransferOrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseFromwarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseTowarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TransferOrderId");

                    b.HasIndex("BranchFromBranchId");

                    b.HasIndex("BranchToBranchId");

                    b.HasIndex("WarehouseFromwarehouseId");

                    b.HasIndex("WarehouseTowarehouseId");

                    b.ToTable("TransferOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOrderLine", b =>
                {
                    b.Property<string>("TransferOrderLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("Qty")
                        .HasColumnType("real");

                    b.Property<string>("TransferOrderId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TransferOrderLineId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("TransferOrderId");

                    b.ToTable("TransferOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOut", b =>
                {
                    b.Property<string>("TransferOutId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchFromBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("BranchToBranchId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferOrderId")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("TransferOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferOutNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WarehouseFromwarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdFrom")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseIdTo")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("WarehouseTowarehouseId")
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TransferOutId");

                    b.HasIndex("BranchFromBranchId");

                    b.HasIndex("BranchToBranchId");

                    b.HasIndex("TransferOrderId");

                    b.HasIndex("WarehouseFromwarehouseId");

                    b.HasIndex("WarehouseTowarehouseId");

                    b.ToTable("TransferOut");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOutLine", b =>
                {
                    b.Property<string>("TransferOutLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemTypeId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<float>("Qty")
                        .HasColumnType("real");

                    b.Property<float>("QtyInventory")
                        .HasColumnType("real");

                    b.Property<string>("TransferOutId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("TransferOutLineId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("TransferOutId");

                    b.ToTable("TransferOutLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HasChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("WMS.Models.Invent.VendorLine", b =>
                {
                    b.Property<string>("vendorLineId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NickName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salutation")
                        .HasColumnType("int");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("vendorId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.HasKey("vendorLineId");

                    b.HasIndex("vendorId");

                    b.ToTable("VendorLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Warehouse", b =>
                {
                    b.Property<string>("warehouseId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("branchId")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)");

                    b.Property<string>("description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("warehouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("warehouseId");

                    b.HasIndex("branchId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Models.Invent.CustomerLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.Customer", "Customer")
                        .WithMany("CustomerLine")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WMS.Models.Invent.PurchaseOrder", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WMS.Models.Invent.PurchaseOrderLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLine")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("ItemType");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.Receiving", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("WMS.Models.Invent.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Vendor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Models.Invent.ReceivingLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.Receiving", "Receiving")
                        .WithMany("ReceivingLine")
                        .HasForeignKey("ReceivingId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Branch");

                    b.Navigation("ItemType");

                    b.Navigation("Receiving");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Models.Invent.SalesOrder", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WMS.Models.Invent.SalesOrderLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderLine")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("ItemType");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.Shipment", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("WMS.Models.Invent.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WMS.Models.Invent.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("SalesOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Models.Invent.ShipmentLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.Shipment", "Shipment")
                        .WithMany("ShipmentLine")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Branch");

                    b.Navigation("ItemType");

                    b.Navigation("Shipment");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferIn", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "BranchFrom")
                        .WithMany()
                        .HasForeignKey("BranchFromBranchId");

                    b.HasOne("WMS.Models.Invent.Branch", "BranchTo")
                        .WithMany()
                        .HasForeignKey("BranchToBranchId");

                    b.HasOne("WMS.Models.Invent.TransferOrder", "TransferOrder")
                        .WithMany()
                        .HasForeignKey("TransferOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseFrom")
                        .WithMany()
                        .HasForeignKey("WarehouseFromwarehouseId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseTo")
                        .WithMany()
                        .HasForeignKey("WarehouseTowarehouseId");

                    b.Navigation("BranchFrom");

                    b.Navigation("BranchTo");

                    b.Navigation("TransferOrder");

                    b.Navigation("WarehouseFrom");

                    b.Navigation("WarehouseTo");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferInLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.TransferIn", "TransferIn")
                        .WithMany("TransferInLine")
                        .HasForeignKey("TransferInId");

                    b.Navigation("ItemType");

                    b.Navigation("TransferIn");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOrder", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "BranchFrom")
                        .WithMany()
                        .HasForeignKey("BranchFromBranchId");

                    b.HasOne("WMS.Models.Invent.Branch", "BranchTo")
                        .WithMany()
                        .HasForeignKey("BranchToBranchId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseFrom")
                        .WithMany()
                        .HasForeignKey("WarehouseFromwarehouseId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseTo")
                        .WithMany()
                        .HasForeignKey("WarehouseTowarehouseId");

                    b.Navigation("BranchFrom");

                    b.Navigation("BranchTo");

                    b.Navigation("WarehouseFrom");

                    b.Navigation("WarehouseTo");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOrderLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.TransferOrder", "TransferOrder")
                        .WithMany("TransferOrderLine")
                        .HasForeignKey("TransferOrderId");

                    b.Navigation("ItemType");

                    b.Navigation("TransferOrder");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOut", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "BranchFrom")
                        .WithMany()
                        .HasForeignKey("BranchFromBranchId");

                    b.HasOne("WMS.Models.Invent.Branch", "BranchTo")
                        .WithMany()
                        .HasForeignKey("BranchToBranchId");

                    b.HasOne("WMS.Models.Invent.TransferOrder", "TransferOrder")
                        .WithMany()
                        .HasForeignKey("TransferOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseFrom")
                        .WithMany()
                        .HasForeignKey("WarehouseFromwarehouseId");

                    b.HasOne("WMS.Models.Invent.Warehouse", "WarehouseTo")
                        .WithMany()
                        .HasForeignKey("WarehouseTowarehouseId");

                    b.Navigation("BranchFrom");

                    b.Navigation("BranchTo");

                    b.Navigation("TransferOrder");

                    b.Navigation("WarehouseFrom");

                    b.Navigation("WarehouseTo");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOutLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("WMS.Models.Invent.TransferOut", "TransferOut")
                        .WithMany("TransferOutLine")
                        .HasForeignKey("TransferOutId");

                    b.Navigation("ItemType");

                    b.Navigation("TransferOut");
                });

            modelBuilder.Entity("WMS.Models.Invent.VendorLine", b =>
                {
                    b.HasOne("WMS.Models.Invent.Vendor", "vendor")
                        .WithMany("VendorLine")
                        .HasForeignKey("vendorId");

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("WMS.Models.Invent.Warehouse", b =>
                {
                    b.HasOne("WMS.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("WMS.Models.Invent.Customer", b =>
                {
                    b.Navigation("CustomerLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Receiving", b =>
                {
                    b.Navigation("ReceivingLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Shipment", b =>
                {
                    b.Navigation("ShipmentLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferIn", b =>
                {
                    b.Navigation("TransferInLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOrder", b =>
                {
                    b.Navigation("TransferOrderLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.TransferOut", b =>
                {
                    b.Navigation("TransferOutLine");
                });

            modelBuilder.Entity("WMS.Models.Invent.Vendor", b =>
                {
                    b.Navigation("VendorLine");
                });
#pragma warning restore 612, 618
        }
    }
}
